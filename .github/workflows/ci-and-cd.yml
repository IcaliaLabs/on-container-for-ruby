name: CI & CD

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]

env:
  # Configures docker-compose to use Docker CLI to build the image:
  COMPOSE_DOCKER_CLI_BUILD: 1
  # Configures Docker CLI to use BuildKit to build the image:
  DOCKER_BUILDKIT: 1

jobs:
  test_build:
    name: Build Test Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v1

      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.x'

      - name: Add CI/CD scripts to system path
        run: echo "${GITHUB_WORKSPACE}/.github/workflows/bin" >> $GITHUB_PATH

      - name: Normalize env vars
        run: normalize-env-vars >> $GITHUB_ENV

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: buildx-cache-${{ env.GIT_BRANCH }}-${{ github.sha }}
          restore-keys: |
            buildx-cache-${{ env.GIT_BRANCH }}-
            buildx-cache-main-
            buildx-cache-

      - name: Build Image
        id: build_test_image
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          target: testing

          platforms: linux/amd64
          
          tags: |
            ${{ env.DOCKER_NAMESPACE }}/on-container-for-ruby:testing-${{ env.GIT_COMMIT_SHORT_SHA }}
            ${{ env.DOCKER_NAMESPACE }}/on-container-for-ruby:testing-${{ env.TAG_SAFE_BRANCH }}
            ${{ env.DOCKER_NAMESPACE }}/on-container-for-ruby:testing-latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          build-args: |
            CODE_PATH=${{env.PWD}}
            DEVELOPER_UID=${{env.UID}}
            DEVELOPER_USERNAME=${{env.USER}}

  testing:
    name: Testing
    runs-on: ubuntu-latest
    needs: [test_build]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v1

      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.x'

      - name: Add CI/CD scripts to system path
        run: echo "${GITHUB_WORKSPACE}/.github/workflows/bin" >> $GITHUB_PATH

      - name: Normalize env vars
        run: normalize-env-vars >> $GITHUB_ENV

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: buildx-cache-${{ env.GIT_BRANCH }}-${{ github.sha }}
          restore-keys: |
            buildx-cache-${{ env.GIT_BRANCH }}-
            buildx-cache-main-
            buildx-cache-

      - name: Load Testing Image
        id: load_test_image
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          target: testing
          push: false

          # Make the build result to be available in the Docker client:
          load: true

          platforms: linux/amd64
          tags: |
            ${{ env.DOCKER_NAMESPACE }}/on-container-for-ruby:testing-${{ env.GIT_COMMIT_SHORT_SHA }}
            ${{ env.DOCKER_NAMESPACE }}/on-container-for-ruby:testing-${{ env.TAG_SAFE_BRANCH }}
            ${{ env.DOCKER_NAMESPACE }}/on-container-for-ruby:testing-latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          build-args: |
            CODE_PATH=${{env.PWD}}
            DEVELOPER_UID=${{env.UID}}
            DEVELOPER_USERNAME=${{env.USER}}

      - name: Run Tests
        run: ci-compose run tests

  release_build:
    name: Build Release
    runs-on: ubuntu-latest
    needs: [test_build]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v1

      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.x'

      - name: Add CI/CD scripts to system path
        run: echo "${GITHUB_WORKSPACE}/.github/workflows/bin" >> $GITHUB_PATH

      - name: Normalize env vars
        run: normalize-env-vars >> $GITHUB_ENV

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: buildx-cache-${{ env.GIT_BRANCH }}-${{ github.sha }}
          restore-keys: |
            buildx-cache-${{ env.GIT_BRANCH }}-
            buildx-cache-main-
            buildx-cache-

      - name: Load Testing Image
        id: load_test_image
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          target: testing
          push: false

          # Make the build result to be available in the Docker client:
          load: true

          platforms: linux/amd64
          tags: |
            ${{ env.DOCKER_NAMESPACE }}/on-container-for-ruby:testing-${{ env.GIT_COMMIT_SHORT_SHA }}
            ${{ env.DOCKER_NAMESPACE }}/on-container-for-ruby:testing-${{ env.TAG_SAFE_BRANCH }}
            ${{ env.DOCKER_NAMESPACE }}/on-container-for-ruby:testing-latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          build-args: |
            CODE_PATH=${{env.PWD}}
            DEVELOPER_UID=${{env.UID}}
            DEVELOPER_USERNAME=${{env.USER}}

      - name: Build Gem
        run: ci-compose run builder

  publish_gem:
    name: Publish Gem
    runs-on: ubuntu-latest
    needs: [testing, release_build]
    if: github.event_name == 'release'
    env:
      GEM_HOST_API_KEY: ${{ secrets.ICALIALABS_GEM_HOST_API_KEY }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v1

      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.x'

      - name: Add CI/CD scripts to system path
        run: echo "${GITHUB_WORKSPACE}/.github/workflows/bin" >> $GITHUB_PATH

      - name: Normalize env vars
        run: normalize-env-vars >> $GITHUB_ENV

      - name: Login to Github Package Registry for Docker
        run: docker login docker.pkg.github.com -u ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }}

      - name: Check ci-compose config
        run: ci-compose config

      - name: Download image cache for "release"
        run: docker-image-manager download-cache release

      - name: Publish release to rubygems
        run: ci-compose run release
        